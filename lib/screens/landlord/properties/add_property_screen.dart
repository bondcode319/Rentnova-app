// lib/screens/landlord/properties/add_property_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:rentnova/models/property.dart';
import 'package:rentnova/providers/property_provider.dart';
import 'package:rentnova/widgets/image_picker_grid.dart';

class AddPropertyScreen extends StatefulWidget {
  const AddPropertyScreen({super.key});

  @override
  State<AddPropertyScreen> createState() => _AddPropertyScreenState();
}

class _AddPropertyScreenState extends State<AddPropertyScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _priceController = TextEditingController();
  final _locationController = TextEditingController();
  final _videoUrlController = TextEditingController();
  final _bedroomsController = TextEditingController();
  final _bathroomsController = TextEditingController();

  PropertyType _selectedPropertyType = PropertyType.apartment;
  RentalType _selectedRentalType = RentalType.standard;
  List<String> _selectedAmenities = [];
  List<String> _imageUrls = [];
  bool _isLoading = false;

  final Map<String, int> _unitBreakdown = {
    '1-bed': 0,
    '2-bed': 0,
    '3-bed': 0,
    'studio': 0,
    'other': 0,
  };

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _priceController.dispose();
    _locationController.dispose();
    _videoUrlController.dispose();
    _bedroomsController.dispose();
    _bathroomsController.dispose();
    super.dispose();
  }

  String? _validateUrl(String? value) {
    if (value == null || value.isEmpty) return null;

    final urlPattern = RegExp(
      r'^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$',
    );

    if (!urlPattern.hasMatch(value)) {
      return 'Please enter a valid URL';
    }
    return null;
  }

  Future<void> _submit() async {
    if (!_formKey.currentState!.validate()) return;

    if (_imageUrls.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please upload at least one image'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    if (_imageUrls.length > 10) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Maximum 10 images allowed'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() => _isLoading = true);

    try {
      final property = PropertyModel(
        id: '', // Will be generated by Firestore
        landlordId:
            Provider.of<UserProvider>(context, listen: false).currentUser!.id,
        title: _titleController.text.trim(),
        description: _descriptionController.text.trim(),
        price: double.parse(_priceController.text.trim()),
        location: _locationController.text.trim(),
        propertyType: _selectedPropertyType,
        rentalType: _selectedRentalType,
        bedrooms: int.parse(_bedroomsController.text.trim()),
        bathrooms: int.parse(_bathroomsController.text.trim()),
        amenities: _selectedAmenities,
        imageUrls: _imageUrls,
        videoUrl:
            _videoUrlController.text.trim().isNotEmpty
                ? _videoUrlController.text.trim()
                : null,
        status: PropertyStatus.pending,
        listedDate: DateTime.now(),
        unitBreakdown: Map<String, int>.from(_unitBreakdown),
      );

      await Provider.of<PropertyProvider>(
        context,
        listen: false,
      ).addProperty(property);

      if (!mounted) return;

      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Property submitted for approval'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error submitting property: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add New Property')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(labelText: 'Title*'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'Description*'),
                maxLines: 3,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  if (value.length < 30) {
                    return 'Description should be at least 30 characters';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _priceController,
                decoration: const InputDecoration(
                  labelText: 'Price (per month)*',
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a price';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _locationController,
                decoration: const InputDecoration(labelText: 'Location*'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a location';
                  }
                  return null;
                },
              ),
              DropdownButtonFormField<PropertyType>(
                value: _selectedPropertyType,
                decoration: const InputDecoration(labelText: 'Property Type*'),
                items:
                    PropertyType.values.map((type) {
                      return DropdownMenuItem<PropertyType>(
                        value: type,
                        child: Text(type.toString().split('.').last),
                      );
                    }).toList(),
                onChanged: (value) {
                  if (value != null) {
                    setState(() => _selectedPropertyType = value);
                  }
                },
              ),
              DropdownButtonFormField<RentalType>(
                value: _selectedRentalType,
                decoration: const InputDecoration(labelText: 'Rental Type*'),
                items:
                    RentalType.values.map((type) {
                      return DropdownMenuItem<RentalType>(
                        value: type,
                        child: Text(type.toString().split('.').last),
                      );
                    }).toList(),
                onChanged: (value) {
                  if (value != null) {
                    setState(() => _selectedRentalType = value);
                  }
                },
              ),
              TextFormField(
                controller: _bedroomsController,
                decoration: const InputDecoration(labelText: 'Bedrooms*'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter number of bedrooms';
                  }
                  if (int.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _bathroomsController,
                decoration: const InputDecoration(labelText: 'Bathrooms*'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter number of bathrooms';
                  }
                  if (int.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              const Text(
                'Amenities:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Wrap(
                spacing: 8,
                children:
                    [
                      'WiFi',
                      'Parking',
                      'Pool',
                      'Gym',
                      'AC',
                      'Furnished',
                      'Laundry',
                      'Security',
                      'Pet Friendly',
                    ].map((amenity) {
                      return FilterChip(
                        label: Text(amenity),
                        selected: _selectedAmenities.contains(amenity),
                        onSelected: (selected) {
                          setState(() {
                            if (selected) {
                              _selectedAmenities.add(amenity);
                            } else {
                              _selectedAmenities.remove(amenity);
                            }
                          });
                        },
                      );
                    }).toList(),
              ),
              const SizedBox(height: 16),
              const Text(
                'Unit Breakdown:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              ..._unitBreakdown.entries.map((entry) {
                return Row(
                  children: [
                    Text('${entry.key}:'),
                    const SizedBox(width: 8),
                    Expanded(
                      child: TextFormField(
                        initialValue: entry.value.toString(),
                        keyboardType: TextInputType.number,
                        onChanged: (value) {
                          _unitBreakdown[entry.key] = int.tryParse(value) ?? 0;
                        },
                      ),
                    ),
                  ],
                );
              }).toList(),
              const SizedBox(height: 16),
              TextFormField(
                controller: _videoUrlController,
                decoration: const InputDecoration(
                  labelText: 'Video URL (optional)',
                  hintText: 'https://...',
                ),
                keyboardType: TextInputType.url,
                validator: _validateUrl,
              ),
              const SizedBox(height: 16),
              const Text(
                'Property Images (1-10):',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              ImagePickerGrid(
                maxImages: 10,
                onImagesSelected: (images) {
                  setState(() => _imageUrls = images);
                },
              ),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _submit,
                  style: ElevatedButton.styleFrom(
                    minimumSize: const Size(200, 50),
                  ),
                  child:
                      _isLoading
                          ? const SizedBox(
                            width: 24,
                            height: 24,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                          : const Text('Submit Property'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
